---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack Tableau for Ec2. See https://github.com/dkn-maida/youtuz-api"

Parameters:

  DisplayName:
    Description: "Project name"
    Type: String
    Default: "youtuz-front"

  #AMI generated by EC2 Image builder youtue-api pipeline   
  baseAMI:
    Description: "Base AMI"
    Type: AWS::EC2::Image::Id
    Default: "ami-0460d96880659a02a"
    ConstraintDescription: "Must be a valid AMI ID."

  Environment:
    Description: Environment
    Type: String
    Default: "prod"
    AllowedValues:
      - "prod"
 
  Ec2Type:
    Description: "EC2 instance type."
    Type: String
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
    ConstraintDescription: "Must be a valid EC2 instance type."
  
  TagApp:
    Description: "Application Tag."
    Type: String
    Default: "youtuz"
    AllowedValues:
      - "youtuz"

  TagComp:
    Description: "Comp Tag."
    Type: String
    Default: "front"
    AllowedValues:
      - "front"

Mappings:
  EnvironmentMap:
    prod:
      SecurityGroupSSH: "sg-608e7b19"
      VPC: "vpc-0ef074f3fe7578734"
      SubnetId: "subnet-07d0dfce24ee3b212,subnet-007538ecfc5b4fcd3"
      AZIdForInstances: "us-east-1a,us-east-1b"
      KeyName: "aws_key_dev"
      DesiredCapacity: 1
      SecurityGroupRegionalEdge: "sg-0eef282648480fef5"
      MaxAsgSize: 4

Resources:

  SecurityGroupForInstances:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${DisplayName}-instances-${Environment}"
      GroupDescription: "Security group dedicated to youtuz-api"
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VPC]

      Tags:
        - Key: "Name"
          Value: !Sub "sg-${DisplayName}-${Environment}"
        - Key: "App"
          Value: !Ref TagApp
        - Key: "Comp"
          Value: !Ref TagComp
        - Key: "Env"
          Value: !Ref Environment

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          # SourceSecurityGroupId: 
            # Fn::ImportValue:
            #   !Sub "youtuz-external-alb-sg-${Environment}"
          Description: "Allow traffic from internal Load Balancer."
  

  AutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub "${DisplayName}-lc-${Environment}"
      ImageId: !Ref "baseAMI"
      InstanceType: !Ref "Ec2Type"
      KeyName: !FindInMap [EnvironmentMap, !Ref Environment, KeyName]
      SecurityGroups:
        - !Ref "SecurityGroupForInstances"
        - !FindInMap [EnvironmentMap, !Ref Environment, SecurityGroupSSH]
      UserData: !Base64
        Fn::Join:
          - ""
          - - "#!/bin/bash\n"
            - "#/usr/bin/su - ec2-user -c '/bin/bash /home/ec2-user/userdata.sh > /home/ec2-user/userdata.log 2>&1 &'"


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${DisplayName}-asg-${Environment}"
      LaunchConfigurationName: !Ref "AutoScalingLaunchConfig"
      AvailabilityZones: !Split [",", !FindInMap [EnvironmentMap, !Ref Environment, AZIdForInstances]]
      VPCZoneIdentifier: !Split [",", !FindInMap [EnvironmentMap, !Ref Environment, SubnetId]]
      DesiredCapacity: !FindInMap [EnvironmentMap, !Ref Environment, DesiredCapacity]
      MinSize: !FindInMap [EnvironmentMap, !Ref Environment, DesiredCapacity]
      MaxSize: !FindInMap [EnvironmentMap, !Ref Environment, MaxAsgSize]
      HealthCheckGracePeriod: 86400
      TargetGroupARNs:
        - !Ref ALBExternalTargetGroup
      Tags:
        - Key: "Name"
          Value: !Sub "${DisplayName}-${Environment}"
          PropagateAtLaunch: true
        - Key: "Env"
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: "Comp"
          Value: !Ref TagComp
          PropagateAtLaunch: true
        - Key: "App"
          Value: !Ref TagApp
          PropagateAtLaunch: true
    
      
          
###############################################################################

  #ALBInternal:
  ALBExternal:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: 'ipv4' 
      Name: !Sub "${DisplayName}-alb-i-${Environment}"
      Scheme: 'internal'
      SecurityGroups: 
        - String
      Subnets: 
        - 'subnet-07d0dfce24ee3b212'
        - 'subnet-007538ecfc5b4fcd3'
      Tags:
        - Key: "Name"
          Value: !Sub "${DisplayName}-${Environment}"
        - Key: "Env"
          Value: !Ref Environment
        - Key: "Comp"
          Value: !Ref TagComp
        - Key: "App"
          Value: !Ref TagApp

  ALBExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Youtuz api ALB Internal SecurityGroup'
      GroupName: 'Youtuz api ALB Internal SecurityGroup'
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # SourceSecurityGroupId: 
          #   Fn::ImportValue:
          #     !Sub "data-alb-mutual-sg-${Environment}"
          CidrIp: 81.249.149.93/32
          #personnal IP for test purposes

      Tags: 
        - Key: "Name"
          Value: !Sub "${DisplayName}-${Environment}"
        - Key: "Env"
          Value: !Ref Environment
        - Key: "Comp"
          Value: !Ref TagComp
        - Key: "App"
          Value: !Ref TagApp
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VPC]
            

  ALBExternalTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VPC]
      Name: !Sub "${DisplayName}-alb-i-tg-${Environment}"
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      Matcher:
        HttpCode: "200"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: "4000"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Tags:
        - Key: App
          Value: !Ref TagApp
        - Key: Comp
          Value: !Ref TagComp
        - Key: Env
          Value: !Ref Environment